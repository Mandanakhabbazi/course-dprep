GitHub  (in-class tutorial)
========================================================
author: Hannes Datta
date: 
autosize: true


Structure of this tutorial
========================================================

- In-class part
  - Overview about Git & GitHub
  - Project management
  - Versioning and the GitHub workflow

*This part features __selected__ issues.*

- After class
  - Please go through the entire (written) tutorial on the [dprep site](https://dprep.hannesdatta.com/docs/tutorials/version-control). 
  - Review shell/command line/terminal

Introduction to GitHub
========================================================
incremental: true

- What is Git? (--> file versioning in repositories, open source)
- What is GitHub? (Git + online tool for collaboration & exploration, commercial)
- Alternatives to GitHub (e.g., bitbucket, gitlab, etc.)

DO: Explore projects on GitHub.com
================================

- Browse the list of project topics at https://github.com/topics
- Click on a topic that sparks your interest, and browse available repositories.

<br>
<br> 
__Let's talk about it...__
- Which topic did you choose?
- Which repositories did you discover?

Overview about a repository
============================

- Each repository has...
  - Readme w/ project description (`README.md`)
  - Meta data (e.g., about, releases, stars)

- On a repository, we can find several tabs
  - Code
  - Issues
  - Pull requests
  - Discussions
  - Projects
  - (and many more...)

DO: Creating a repository on GitHub.com
=================

- Normally, we start a new repository on GitHub.com, or start from existing folder on our computer
<br><br>
- __Today__, we use "GitHub classroom" (so I can see what you're up to)
  - Open this link, please: https://classroom.github.com/a/yZKt41QJ
  - Change title of `readme.md` to "First repository with exercises in dPrep" & commit your changes

Recap
===========

- In essence, we use Git/GitHub for adding/changing code
- Whenever we save code in Git's version history, we call this a commit
- Everybody who has access to this Git repository will be able to roll back to this version
<br><br>
- __Question: Why make a difference between *saving* and *committing*?__


Working with Git/GitHub
=================================

- Git on your own computer for *actual* coding and file versioning
  - e.g., terminal, GitHub desktop, RStudio, etc.
  - reason: software setup will be correct, no cloud fees, etc.

- GitHub.com for interactive web interface
  - project management (issues, project boards, accepting code contributions, viewing history, etc.)

<br>

__We first proceed with the interactive interface on GitHub.com.__

DO: Organize project board
=========================

- [The Scrum method](https://tilburgsciencehub.com/learn/scrum) is an effective project management tool
- Key: Break down project in smaller to do's, organize them in sprints, and meet to discuss progress

<br>
__Task:__
- Navigate to your repository's project page, and create a __new board__.
- Create columns to organize tasks, call them
  - backlog
  - to do
  - in progress
  - done

When done, you should have an empty board with four columns (you may want to change to card view).

Let's talk about issues ("to do's")
======================

- __Discrete__, __well-defined units of work__ on a project
  - shouldn't be more than a few hours of work
  - shouldn't be open for forever
  - have clear __deliverables__, and __assignees__
- __Adaptivity__
  - scope may grow or shrink as new questions arise
  - e.g., change title where needed
- __Prioritization__ on project board

<br>
*View [tips about writing effective issues](https://tilburgsciencehub.com/write/issues/?utm_campaign=referral-short)*.

DO: Let's create our first issue
==================

- Open a new issue
  - Title: Fix readme
  - Goal: The goal of this issue is to update the readme to conform with best practices.
  - Resources: https://tilburgsciencehub.com/write/readme/
  - Deliverables: An updated readme in a new branch + a pull request

- Assign the issue to the to do column of your project board

Tip: For now, let's say you need to add the motivation of your project to the readme.

DO: Let's perform the Git Workflow online
======================

__Overview available at https://dprep.hannesdatta.com/docs/project/resources/cheat-sheets/__

1. Check your project board and find an issue to work on
2. Create a __development branch__ (online interface works best)
3. Make necessary changes (here: online, but later on your local computers), update the Git issue throughout
4. When done: Make __pull request__

__I'll first demonstrate it on one of my own repositories. You can then repeat these steps on your own repository.__

GitHub (online interface) vs. Git
==========================

- For now, we only used GitHub.com
- Ultimately, we seek to build a code base for our project
- Likely won't be able to run R, Python etc. in the cloud
- Need a way to get our work from GitHub.com synced with our local computers
- For now, assume we work on our own
- Let's introduce some Git vocab here
  - `git clone` repository to which you have access to (once)
  - `git pull` to update from the cloud (before starting to work)
  - `git status`, `git add`, `git commit -m "message"` (multiple times)
  - `git push` to push changes to cloud (after finishing work)
  
DO: Clone repository and work on it
======

1. Copy the URL to your class room repository
2. Open Git Bash, and type `git clone https://github.com/course-dprep/in-class-tutorial-hannesdatta` (__use your username, of course!__)
3. Add something to the readme and save
4. Perform Git workflow
  - `git status` (view changes)
  - `git add <filename>` (add file(s) to "staging area")
  - `git commit -m "message"` (freeze commit)
  - `git push -u origin master` (push to GitHub)
5. View changes on GitHub.com - do you see them?

Browsing GitHub on the web
===============

- Version history
- Comparing changes between files

GitHub & R
===============

- How to use GitHub in RStudio?
- Other graphical user interfaces (e.g., GitHub desktop)

Next steps
===============

- Start with the recap exercises on the dprep site (self-guided tutorial)
- Keep a copy of the cheat sheet
- Start working on projects & organizing them according to today's principles (project board, issues, etc.)
